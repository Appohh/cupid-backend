plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "4.2.1.3168"
}

group = 'cupid.main'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation 'org.springframework.security:spring-security-crypto:6.0.3'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.69'
    implementation 'junit:junit:4.13.1'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    implementation 'org.flywaydb:flyway-core'
//    implementation 'org.flywaydb:flyway-mysql'
    implementation 'com.mysql:mysql-connector-j:8.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named('sonar').configure {
    dependsOn(jacocoTestReport)
}

jacocoTestReport {
    dependsOn(test)
    reports {
        xml.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
//            fileTree(dir: it, exclude: [
////                    '**/*'
//            ]) +

                    fileTree(dir: it, includes: [
                            '**/*'
                    ]
                    )
        }))
    }

}

sonar {
    properties {
        property "sonar.projectKey", "Cupid"
        property "sonar.projectName", "Cupid"
        property "sonar.token", "sqa_a4bda6f1edc9b15ba80600a5a766f249ed0f9b41"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.qualitygate.wait", true
        property "sonar.gradle.skipCompile", true
        property "sonar.coverage.exclusions", [
                'src/main/java/**/persistence/**'
        ]

//        property "sonar.coverage.exclusions", [
//                "**/config/**",
//                "**/controller/**",
//                "**/domain/**",
//                "**/external/**",
//                "**/persistence/**"
//        ]
    }
}
